const config = {
    name: "noprefix",
    version: "1.0.0",
    hasPermssion: 0,
    description: "Anh kh√¥ng th∆∞∆°ng emü•∫",
    credits: "Nghƒ©a Khoai To", // Ultra Super Mega Rebuild By DungUwU
    commandCategory: "Kh√¥ng c·∫ßn d·∫•u l·ªánh",
    usages: "noprefix",
    cooldowns: 5,
    dependencies: {
        "fs": "",
        "request": ""
    }
};

const dirMaterial = __dirname + `/noprefix/`;

const conditionsAndData = [
    {
        conditions: ["anh kh√¥ng th∆∞∆°ng em", "anh hong th∆∞∆°ng em", "ko th∆∞∆°ng em"],
        message: "Anh kh√¥ng th∆∞∆°ng emü•∫",
        files: {
            "ko1.mp4": "https://i.imgur.com/M7fILWe.mp4"
        }
    },
    {
        conditions: ["anh qu√°t em", "qu√°t em"],
        message: ".Anh qu√°t em √† ü•∫",
        files: {
            "qu√°t.mp4": "https://i.imgur.com/YS4GY67.mp4"
        }
    },
    {
        conditions: ["b√©o √°", "t b√©o √°", "m b·∫£o tao b√©o"],
        message: "T c·∫Øn c·∫Øn m gi·ªùüòæ",
        files: {
            "b√©o.mp4": "https://i.imgur.com/6bDUUHF.mp4"
        }
    },
    {
        conditions: ["b·∫Øn", "b√πm"],
        message: "Chiu Chiu ! Tr√∫ng tim p·∫°n ch∆∞a üòâüòã",
        files: {
            "b·∫Øn.gif": "https://i.imgur.com/OUoF0Cu.gif"
        }
    },
    {
        conditions: ["bu·ªìn", "b√πn", "p√πn", "kh√≥c"],
        message: "ƒê·ª´ng bu·ªìn n·ªØa th∆∞∆°ng:3",
        files: {
            "bu·ªìn.mp4": "https://i.imgur.com/eWjpUcr.mp4"
        }
    },
    {
        conditions: ["bye", "t·∫°m bi·ªát", "pp", "bai"],
        message: "ƒêi ƒë√¢u ƒëo√° üòæ",
        files: {
            "bye.mp4": "https://i.imgur.com/s2wvTk5.mp4"
        }
    },
    {
        conditions: ["chia s·∫ª"],
        message: "üë®‚Äçüè´Chia s·∫ª cho th·∫ßy ƒëiii",
        files: {
            "chiase2.mp3": "https://unkemptaptmotion.rootandroid.repl.co/chiase2.mp3"
        }
    },
    {
        conditions: ["h n√†y c√≤n ch∆∞a ng·ªß", "ch∆∞a ng·ªß h·∫£"],
        message: "Ng·ªß ƒëi nh√° th∆∞∆°ngüòΩ",
        files: {
            "chuangu4.mp4": "https://i.imgur.com/r4EL6Cj.mp4"
        }
    },
    {
        conditions: ["aaaa con tr√≥ n√†i", "con tr√≥ n√†i"],
        message: "Awww con tr√≥ n√†iii :3",
        files: {
            "tr√≥.mp4": "https://i.imgur.com/dQUgOFp.mp4"
        }
    },
    {
        conditions: ["gao ·ªì", "si√™u nh√¢n gao"],
        message: "Gao ·ªí .... :>>",
        files: {
            "gao1.mp4": "https://unkemptaptmotion.rootandroid.repl.co/gao1.mp4"
        }
    },
    {
        conditions: ["h√°t b√†i n√†o vui vui ƒëi bot", "h√°t b√†i n√†o vui ƒëi bot"],
        message: "B√†i n√†y vui n√®üòò",
        files: {
            "h√°t.mp4": "https://unkemptaptmotion.rootandroid.repl.co/hat.mp4"
        }
    },
    {
        conditions: ["h√°t ƒëi bot"],
        message: "Nghe Bot h√°t n√® :3",
        files: {
            "h√°t1.mp4": "https://unkemptaptmotion.rootandroid.repl.co/hat1.mp4",
          "hat2.mp4":"http://tinyurl.com/2bdqosk4",
          "hat3.mp4":"http://tinyurl.com/22q4ulte",
          "hat4.mp4":"http://tinyurl.com/29r5zynb"
        }
    },
    {
        conditions: ["helo", "hello", "hii", "h√≠"],
        message: "Haiii ch√†o c·∫≠u :3",
        files: {
            "hii.mp4": "https://unkemptaptmotion.rootandroid.repl.co/hii.mp4",
          "h√≠i.mp4":"http://tinyurl.com/2cty5unq"
        }
    },
    {
        conditions: ["qu√™ :>", "√¥i qu√™"],
        message: "Lew Lew Qu√™",
        files: {
            "qu√™.mp3": "https://unkemptaptmotion.rootandroid.repl.co/que.mp3"
        }
    },
    {
        conditions: ["s·∫ßu", "ch√°n"],
        message: "ƒê·ª´ng b√πn n·ªØa nh√°ü•∫",
        files: {
            "s·∫ßu2.mp4": "https://unkemptaptmotion.rootandroid.repl.co/sau2.mp4"
        }
    }
]

module.exports.onLoad = function () {
    const { existsSync, mkdirSync, createWriteStream, statSync } = global.nodemodule["fs"];
    const { request } = global.nodemodule;
    if (!existsSync(dirMaterial)) mkdirSync(dirMaterial, { recursive: true });

    for (let i = 0; i < conditionsAndData.length; i++) {
        for (const fileName in conditionsAndData[i].files) {
            const filePath = `${dirMaterial}${fileName}`;
            if (!existsSync(filePath) || !statSync(filePath).isFile() || statSync(filePath).size === 0) {
                const file = createWriteStream(filePath);
                request(conditionsAndData[i].files[fileName])
                    .pipe(file)
                    .on("close", () => console.log(`[ NOPREFIX ] Downloaded ${fileName}`));
            }
        }
    }
}

module.exports.handleEvent = function ({ api, event }) {
    let { threadID, messageID, body } = event;
    const { createReadStream, existsSync, statSync } = global.nodemodule["fs"];

    body = body ? body.toLowerCase() : "";
    let msg = null, randomFile, allFiles, filePath;

    for (let i = 0; i < conditionsAndData.length; i++) {
        if (conditionsAndData[i].conditions.some(condition => body.indexOf(condition) == 0)) {
            allFiles = Object.keys(conditionsAndData[i].files);
            randomFile = allFiles[Math.floor(Math.random() * allFiles.length)];
            filePath = `${dirMaterial}${randomFile}`;

            if (existsSync(filePath) || statSync(filePath).isFile() || statSync(filePath).size > 0) {
                msg = {
                    body: conditionsAndData[i].message,
                    attachment: createReadStream(filePath)
                }
            }
            break;
        }
    }

    if (msg != null) api.sendMessage(msg, threadID, messageID);
    return;
}
export default {
    config,
    langData,
    onCall
}
